linux平台IO类型：
阻塞IO  （同步IO）
非阻塞IO （同步IO）
信号驱动IO 
多路复用IO （同步IO）
异步IO
一次IO(Read)分为两个步骤 （1）:等待数据准备（2）:将数据从内核拷贝到进程

信号IO和异步IO的主要区别在于：信号驱动IO是有内核通知我们何时启动一个IO操作，异步IO是有内核通知我们何时完成一个IO操纵

epoll poll select的用途和区别：
Linux的内核将所有设备都看作一个文件操作，对文件的读写都会调用内核提供的系统命令，返回一个fd
IO多路复用就是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪，就能够通知程序进行响应的读写操作。

select(仅提供select函数)
(1) copy fd_set from user to kernel
(2) register callback function
(3) 遍历
(4) copy fd_set from kernel to user
缺点：
每次调用select，都需要把fd_set拷贝到kernel,都需要在内核中遍历fd_set。select支持的文件描述符数量过小

poll（仅提供poll函数）
poll和select非常相似，只是描述fd集合的方式不同，poll使用pollfd结构而不是fd_set结构

epoll（提供epoll_create,epoll_ctl,epoll_wait函数）
epoll_create创建一个epoll句柄
epoll_ctl注册要监听的事件类型
epoll_wait等待事件的产生
针对select/poll的问题,epoll的解决方式：
（1）对于第一个缺点，epoll的解决方案在epoll_ctl函数中。每次注册新的事件到epoll句柄中时（在epoll_ctl中指定EPOLL_CTL_ADD），会把所有的fd拷贝进内核，而不是在epoll_wait的时候重复拷贝。epoll保证了每个fd在整个过程中只会拷贝一次。
（2）对于第二个缺点，epoll的解决方案不像select或poll一样每次都把current轮流加入fd对应的设备等待队列中，而只在epoll_ctl时把current挂一遍（这一遍必不可少）并为每个fd指定一个回调函数，当设备就绪，唤醒等待队列上的等待者时，就会调用这个回调函数，而这个回调函数会把就绪的fd加入一个就绪链表）。epoll_wait的工作实际上就是在这个就绪链表中查看有没有就绪的fd（利用schedule_timeout()实现睡一会，判断一会的效果，和select实现中的第7步是类似的）。
（3）对于第三个缺点，epoll没有这个限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于2048,举个例子,在1GB内存的机器上大约是10万左右，具体数目可以cat /proc/sys/fs/file-max察看,一般来说这个数目和系统内存关系很大。
